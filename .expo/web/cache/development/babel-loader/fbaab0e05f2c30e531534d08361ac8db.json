{"ast":null,"code":"'use strict';\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nfunction checkAndroidReadSmsAuthorized() {\n  var authorized;\n  return _regeneratorRuntime.async(function checkAndroidReadSmsAuthorized$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\", false);\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_SMS));\n\n        case 5:\n          authorized = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](2);\n\n        case 10:\n          return _context.abrupt(\"return\", authorized === PermissionsAndroid.RESULTS.GRANTED);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}\n\nfunction isAuthorizedForCallback(androidCanReadSms) {\n  return Platform.OS !== 'android' || androidCanReadSms;\n}\n\nfunction send(options, callback) {\n  var androidCanReadSms;\n  return _regeneratorRuntime.async(function send$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(checkAndroidReadSmsAuthorized());\n\n        case 2:\n          androidCanReadSms = _context2.sent;\n          options.isAuthorizedForCallback = isAuthorizedForCallback(androidCanReadSms);\n\n          if (options.isAuthorizedForCallback || options.allowAndroidSendWithoutReadPermission) {\n            NativeModules.SendSMS.send(options, callback);\n          }\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar SendSMS = {\n  send: send\n};\nmodule.exports = SendSMS;","map":{"version":3,"sources":["/home/kishore/React/taxidi/node_modules/react-native-sms/index.js"],"names":["checkAndroidReadSmsAuthorized","Platform","OS","PermissionsAndroid","request","PERMISSIONS","READ_SMS","authorized","RESULTS","GRANTED","isAuthorizedForCallback","androidCanReadSms","send","options","callback","allowAndroidSendWithoutReadPermission","NativeModules","SendSMS","module","exports"],"mappings":"AACA;;;;;;;AAIA,SAAeA,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACMC,QAAQ,CAACC,EAAT,KAAgB,SADtB;AAAA;AAAA;AAAA;;AAAA,2CAEW,KAFX;;AAAA;AAAA;AAAA;AAAA,2CAQuBC,kBAAkB,CAACC,OAAnB,CAA2BD,kBAAkB,CAACE,WAAnB,CAA+BC,QAA1D,CARvB;;AAAA;AAQIC,UAAAA,UARJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAaSA,UAAU,KAAKJ,kBAAkB,CAACK,OAAnB,CAA2BC,OAbnD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASC,uBAAT,CAAiCC,iBAAjC,EAAoD;AAClD,SAAOV,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BS,iBAApC;AACD;;AAED,SAAeC,IAAf,CAAoBC,OAApB,EAAqCC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACkCd,6BAA6B,EAD/D;;AAAA;AACQW,UAAAA,iBADR;AAGEE,UAAAA,OAAO,CAACH,uBAAR,GAAkCA,uBAAuB,CAACC,iBAAD,CAAzD;;AAEA,cAAIE,OAAO,CAACH,uBAAR,IAAmCG,OAAO,CAACE,qCAA/C,EAAsF;AACpFC,YAAAA,aAAa,CAACC,OAAd,CAAsBL,IAAtB,CAA2BC,OAA3B,EAAoCC,QAApC;AACD;;AAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,IAAMG,OAAO,GAAG;AACdL,EAAAA,IAAI,EAAJA;AADc,CAAhB;AAIAM,MAAM,CAACC,OAAP,GAAiBF,OAAjB","sourcesContent":["//@flow\n'use strict';\n\nimport { NativeModules, PermissionsAndroid, Platform } from 'react-native'\n\nasync function checkAndroidReadSmsAuthorized() {\n  if (Platform.OS !== 'android') {\n    return false;\n  }\n\n  let authorized;\n\n  try {\n    authorized = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_SMS);\n  } catch (error) {\n    // do nothing\n  }\n\n  return authorized === PermissionsAndroid.RESULTS.GRANTED;\n}\n\nfunction isAuthorizedForCallback(androidCanReadSms) {\n  return Platform.OS !== 'android' || androidCanReadSms;\n}\n\nasync function send(options: Object, callback: () => void) {\n  const androidCanReadSms = await checkAndroidReadSmsAuthorized();\n\n  options.isAuthorizedForCallback = isAuthorizedForCallback(androidCanReadSms);\n\n  if (options.isAuthorizedForCallback || options.allowAndroidSendWithoutReadPermission) {\n    NativeModules.SendSMS.send(options, callback);\n  }\n}\n\nconst SendSMS = {\n  send\n}\n\nmodule.exports = SendSMS;\n"]},"metadata":{},"sourceType":"module"}