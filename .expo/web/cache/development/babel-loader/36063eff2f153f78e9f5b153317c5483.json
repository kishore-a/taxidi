{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/kishore/React/taxidi/src/screens/Maps/index.js\";\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport MapView, { Marker, PROVIDER_GOOGLE } from \"react-native-maps\";\nimport Markercomponent from \"../../components/MarkerComponent\";\nimport { useState, useEffect, useRef } from \"react\";\nimport places from \".././../../assets/data/feed\";\nimport PostCarousel from \"../../components/posts/PostCarousel\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nvar Mapspage = function Mapspage() {\n  var flatlist = useRef();\n  var viewableconfig = useRef({\n    itemVisiblePercentThreshold: 90\n  });\n  var onviewchanged = useRef(function (_ref) {\n    var viewableableItem = _ref.viewableableItem;\n    console.log(viewableableItem);\n  });\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedPlaceid = _useState2[0],\n      setselectedPlaceid = _useState2[1];\n\n  useEffect(function () {\n    if (!selectedPlaceid) {\n      return;\n    }\n\n    var index = places.findIndex(function (place) {\n      return place.id === selectedPlaceid;\n    });\n    flatlist.current.scrollToIndex({\n      index: index\n    });\n  }, [selectedPlaceid]);\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, React.createElement(MapView, {\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    provider: PROVIDER_GOOGLE,\n    initialRegion: {\n      latitude: 13.0056966,\n      longitude: 80.2476796,\n      latitudeDelta: 0.0922,\n      longitudeDelta: 0.0421\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, places.map(function (place) {\n    return React.createElement(Markercomponent, {\n      coordinate: place.coordinates,\n      price: place.after_price,\n      isSelected: place.id === selectedPlaceid,\n      onPress: function onPress() {\n        return setselectedPlaceid(place.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    });\n  })), React.createElement(View, {\n    style: {\n      position: \"absolute\",\n      bottom: 20,\n      left: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    ref: flatlist,\n    key: places.id,\n    data: places,\n    snapToAlignment: \"center\",\n    decelerationRate: \"fast\",\n    snapToInterval: 400 - 60,\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PostCarousel, {\n        item: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 37\n        }\n      });\n    },\n    onViewableItemsChanged: onviewchanged.current,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Mapspage;","map":{"version":3,"sources":["/home/kishore/React/taxidi/src/screens/Maps/index.js"],"names":["React","MapView","Marker","PROVIDER_GOOGLE","Markercomponent","useState","useEffect","useRef","places","PostCarousel","FlatList","Mapspage","flatlist","viewableconfig","itemVisiblePercentThreshold","onviewchanged","viewableableItem","console","log","selectedPlaceid","setselectedPlaceid","index","findIndex","place","id","current","scrollToIndex","height","width","latitude","longitude","latitudeDelta","longitudeDelta","map","coordinates","after_price","position","bottom","left","item"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, Text } from \"react-native\";\nimport MapView, { Marker, PROVIDER_GOOGLE } from \"react-native-maps\";\nimport Markercomponent from \"../../components/MarkerComponent\";\nimport { useState, useEffect, useRef } from \"react\";\nimport places from \".././../../assets/data/feed\";\nimport PostCarousel from \"../../components/posts/PostCarousel\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nconst Mapspage = () => {\n  const flatlist = useRef();\n  const viewableconfig = useRef({ itemVisiblePercentThreshold: 90 });\n  const onviewchanged = useRef(({ viewableableItem }) => {\n    console.log(viewableableItem);\n  });\n  const [selectedPlaceid, setselectedPlaceid] = useState(null);\n  useEffect(() => {\n    if (!selectedPlaceid) {\n      return;\n    }\n    const index = places.findIndex((place) => place.id === selectedPlaceid);\n    flatlist.current.scrollToIndex({ index });\n  }, [selectedPlaceid]);\n  return (\n    <View>\n      <MapView\n        style={{ height: \"100%\", width: \"100%\" }}\n        provider={PROVIDER_GOOGLE}\n        initialRegion={{\n          latitude: 13.0056966,\n          longitude: 80.2476796,\n          latitudeDelta: 0.0922,\n          longitudeDelta: 0.0421,\n        }}\n      >\n        {places.map((place) => (\n          <Markercomponent\n            coordinate={place.coordinates}\n            price={place.after_price}\n            isSelected={place.id === selectedPlaceid}\n            onPress={() => setselectedPlaceid(place.id)}\n          />\n        ))}\n      </MapView>\n      <View style={{ position: \"absolute\", bottom: 20, left: 15 }}>\n        <FlatList\n          ref={flatlist}\n          key={places.id}\n          data={places}\n          snapToAlignment={\"center\"}\n          decelerationRate={\"fast\"}\n          snapToInterval={400 - 60}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          renderItem={({ item }) => <PostCarousel item={item} />}\n          onViewableItemsChanged={onviewchanged.current}\n        />\n      </View>\n    </View>\n  );\n};\n\nexport default Mapspage;\n"]},"metadata":{},"sourceType":"module"}